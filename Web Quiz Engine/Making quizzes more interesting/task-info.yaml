type: edu
custom_name: stage3
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {

        public WebQuizEngineTest() {
            super(WebQuizEngine.class);
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(0),
            () -> testQuizExists(0),
            () -> testQuizNotExists(0),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizIds[0], "[0]", false),
            () -> checkQuizSuccess(quizIds[0], "[1]", false),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),

            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),
            () -> checkQuizSuccess(quizIds[1], "[2]", false),
            () -> checkQuizSuccess(quizIds[1], "[3]", false),

            () -> addIncorrectQuiz(error400noTitle),
            () -> addIncorrectQuiz(error400emptyTitle),
            () -> addIncorrectQuiz(error400noText),
            () -> addIncorrectQuiz(error400emptyText),
            () -> addIncorrectQuiz(error400noOptions),
            () -> addIncorrectQuiz(error400emptyOptions),
            () -> addIncorrectQuiz(error400oneOption),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),
            () -> checkQuizSuccess(quizIds[2], "[]", false),
            () -> checkQuizSuccess(quizIds[2], "[0]", false),
            () -> checkQuizSuccess(quizIds[2], "[1]", false),
            () -> checkQuizSuccess(quizIds[2], "[2]", false),
            () -> checkQuizSuccess(quizIds[2], "[3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false),

            () -> testCreateQuiz(3),
            () -> testQuizExists(3),
            () -> testQuizNotExists(3),
            () -> checkQuizSuccess(quizIds[3], "[]", false),
            () -> checkQuizSuccess(quizIds[3], "[0]", false),
            () -> checkQuizSuccess(quizIds[3], "[1]", false),
            () -> checkQuizSuccess(quizIds[3], "[2]", false),
            () -> checkQuizSuccess(quizIds[3], "[3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false),

            () -> testCreateQuiz(4),
            () -> testQuizExists(4),
            () -> testQuizNotExists(4),
            () -> checkQuizSuccess(quizIds[4], "[]", true),
            () -> checkQuizSuccess(quizIds[4], "[0]", false),
            () -> checkQuizSuccess(quizIds[4], "[1]", false),
            () -> checkQuizSuccess(quizIds[4], "[2]", false),
            () -> checkQuizSuccess(quizIds[4], "[3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false),

            () -> testCreateQuiz(5),
            () -> testQuizExists(5),
            () -> testQuizNotExists(5),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[5], "[1]", false),
            () -> checkQuizSuccess(quizIds[5], "[2]", false),
            () -> checkQuizSuccess(quizIds[5], "[3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false),

            () -> testCreateQuiz(6),
            () -> testQuizExists(6),
            () -> testQuizNotExists(6),
            () -> checkQuizSuccess(quizIds[6], "[]", false),
            () -> checkQuizSuccess(quizIds[6], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[1]", false),
            () -> checkQuizSuccess(quizIds[6], "[2]", false),
            () -> checkQuizSuccess(quizIds[6], "[3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {

            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + 125);
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quiz).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/QuizNoAnswer.java
  visible: true
  text: |
    package engine;

    import java.util.List;

    public class QuizNoAnswer {

        private Integer id;
        private String title;
        private String text;
        private List<String> options;

        public QuizNoAnswer(Quiz quiz, Integer id) {
            this.id = id;
            this.title = quiz.getTitle();
            this.text = quiz.getText();
            this.options = quiz.getOptions();
        }

        public String getTitle() {
            return title;
        }

        public String getText() {
            return text;
        }

        public List<String> getOptions() {
            return options;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public void setText(String text) {
            this.text = text;
        }

        public void setTitle(String title) {
            this.title = title;
        }
    }
  learner_created: true
- name: src/engine/UserInfo.java
  visible: true
  text: |-
    package engine;

    public class UserInfo {

        private int id;
        private String name;
        private String phone;
        private boolean enabled;

        // getters and setters

        UserInfo() {}

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getPhone() {
            return phone;
        }

        public boolean isEnabled() {
            return enabled;
        }

        public void setEnabled(boolean enabled) {
            this.enabled = enabled;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setPhone(String phone) {
            this.phone = phone;
        }
    }
  learner_created: true
- name: src/engine/BotController.java
  visible: true
  text: |
    package engine;

    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;

    @RestController
    public class BotController {

        @PostMapping(value = "/greet", consumes = "application/json")
        public String greet(@RequestBody UserInfo userInfo) {
            if (userInfo.isEnabled()) {
                return String.format("Hello! Nice to see you, %s!", userInfo.getName());
            } else return String.format("Hello! Nice to see you, %s! Your account is disabled", userInfo.getName());
        }

        @PostMapping(value = "/greetArray", consumes = "application/json")
        public String greet(@RequestBody List<UserInfo> userInfoList) {
            //logging out users
            return String.format("OK, %d of users have been logged out!", userInfoList.size());
        }
    }
  learner_created: true
- name: src/engine/QuizStorage.java
  visible: true
  text: |+
    package engine;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @Component
    public class QuizStorage {

        private Map<Integer, Quiz> quizMap = new HashMap<>();
        private Integer nextId = 0;

        public QuizStorageConfirmation insert(Quiz quiz) {
            quizMap.put(nextId, quiz);
            return new QuizStorageConfirmation(quiz.getTitle(), quiz.getText(), quiz.getOptions(), nextId++);
        }

        public QuizNoAnswer get(Integer id) {
            if (quizMap.containsKey(id)) {
                return new QuizNoAnswer(quizMap.get(id), id);
            }
            else {
                return null;
            }
        }

        public List<QuizNoAnswer> getAll() {
            var result = new ArrayList<QuizNoAnswer>();

            for (int id = 0; id < nextId; id++) {
                result.add(new QuizNoAnswer(quizMap.get(id), id));
            }

            return result;
        }

        public Integer getAnswer(Integer id) {
            if (quizMap.containsKey(id)) {
                return quizMap.get(id).getAnswer();
            }
            else {
                return null;
            }
        }
    }

  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Quiz {

        private String title;
        private String text;
        private List<String> options;
        private int answer;

        // public Quiz(String title, String text, List<String> options, int answer) {
        public Quiz() {
            // this.title = title;
            // this.text = text;
            // this.options = options;

            this.title = "The Java Logo";
            this.text = "What is depicted on the Java logo?";
            this.options = new ArrayList<>(Arrays.asList("Robot","Tea leaf","Cup of coffee","Bug"));
            this.answer = 2;
        }

        public String getTitle() {
            return title;
        }

        public String getText() {
            return text;
        }

        public List<String> getOptions() {
            return options;
        }

        public int getAnswer() {
            return answer;
        }

        public void setAnswer(int answer) {
            this.answer = answer;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public void setText(String text) {
            this.text = text;
        }

        public void setTitle(String title) {
            this.title = title;
        }
    }
  learner_created: true
- name: src/engine/QuizResponse.java
  visible: true
  text: |
    package engine;

    public class QuizResponse {
        private final Boolean success;
        private final String feedback;

        public QuizResponse(Boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public Boolean getSuccess() {
            return success;
        }

        public String getFeedback() {
            return feedback;
        }
    }
  learner_created: true
- name: src/engine/QuizStorageConfirmation.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.jta.atomikos.AtomikosProperties;

    import java.util.List;

    public class QuizStorageConfirmation {
        private Integer id;
        private String title;
        private String text;
        private List<String> options;

        public QuizStorageConfirmation(String title, String text, List<String> options, Integer id) {
            this.title = title;
            this.text = text;
            this.options = options;
            this.id = id;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public void setText(String text) {
            this.text = text;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public Integer getId() {
            return id;
        }

        public List<String> getOptions() {
            return options;
        }

        public String getText() {
            return text;
        }

        public String getTitle() {
            return title;
        }
    }
  learner_created: true
- name: src/engine/QuizNotFound.java
  visible: true
  text: |
    package engine;


    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.NOT_FOUND)
    public class QuizNotFound extends RuntimeException {
    }
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  text: |
    package engine;

    import io.micrometer.core.instrument.util.StringUtils;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;


    @RestController
    public class QuizController {

        private QuizStorage quizStorage;

        @Autowired
        public QuizController(QuizStorage quizStorage) {
            this.quizStorage = quizStorage;
        }

        @GetMapping("/api/quiz")
        public Quiz getQuiz() {
            return new Quiz();
        }

        /*
        @PostMapping("/api/quiz/{answer}")
        public QuizResponse answerQuiz(@PathVariable Integer answer) {
            if (answer == 2) { // ok
                return new QuizResponse(true, "Congratulations, you're right! - 1");
            }
            else { // wrong answer
                return new QuizResponse(false, "Wrong answer! Please, try again.");
            }
        }
         */
        @RequestMapping({"/api/quiz/{answer}","/api/quiz"})
        public QuizResponse answerQuiz(@RequestParam(value = "answer", defaultValue = "0") String answer) {

            if (StringUtils.isEmpty(answer)) {
                return new QuizResponse(false, "Wrong answer! Please, try again. 000");
            }

            Integer answerInt = Integer.parseInt(answer);

            if (answerInt == 2) { // ok
                return new QuizResponse(true, "Congratulations, you're right!");
            }
            else { // wrong answer
                return new QuizResponse(false, "Wrong answer! Please, try again.");
            }
        }

        /******************************************************************/
        /******************************************************************/
        /******************************************************************/
                        // new code for state 2/6:
        /******************************************************************/
        /******************************************************************/
        /******************************************************************/

        @PostMapping(value = "/api/quizzes", consumes = "application/json")
        public QuizStorageConfirmation postQuiz(@RequestBody Quiz quiz) {
            var storageAnsewer = quizStorage.insert(quiz);

            return storageAnsewer;
        }

        @RequestMapping(value="/api/quizzes/{idStr}", method=RequestMethod.GET)
        public QuizNoAnswer getQuizById(@PathVariable String idStr) {
            Integer id = Integer.parseInt(idStr);
            QuizNoAnswer response = quizStorage.get(id);

            if (response == null) {
                throw new QuizNotFound();
            }
            return quizStorage.get(id);
        }

        @RequestMapping(value="/api/quizzes", method=RequestMethod.GET)
        public List<QuizNoAnswer> getAllQuizes() {
            return quizStorage.getAll();
        }

        @RequestMapping(value = {"/api/quizzes/{idStr}/solve"}, method=RequestMethod.POST)
        public QuizResponse answerQuizPart2(@RequestParam(value = "answer", defaultValue = "0") String answer,
                                            @PathVariable String idStr) {

           Integer answerInt = Integer.parseInt(answer);
           Integer idInt = Integer.parseInt(idStr);

           Integer correctAnswer = quizStorage.getAnswer(idInt);

           if (correctAnswer == null) {
               throw new QuizNotFound();
           }

            if (answerInt == correctAnswer) { // ok
                return new QuizResponse(true, "Congratulations, you're right!");
            }
            else { // wrong answer
                return new QuizResponse(false, "Wrong answer! Please, try again.");
            }
        }

        /******************************************************************/
        /******************************************************************/
        /******************************************************************/
                    // new code for state 3/6:
        /******************************************************************/
        /******************************************************************/
        /******************************************************************/

    }
  learner_created: true
- name: src/engine/Greeting.java
  visible: true
  text: |
    package engine;

    public class Greeting {

        private final long id;
        private final String content;

        public Greeting(long id, String content) {
            this.id = id;
            this.content = content;
        }

        public long getId() {
            return id;
        }

        public String getContent() {
            return content;
        }
    }
  learner_created: true
- name: src/engine/GreetingController.java
  visible: true
  text: |
    package engine;

    import java.util.concurrent.atomic.AtomicLong;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class GreetingController {

        private static final String template = "Hello, %s!";
        private final AtomicLong counter = new AtomicLong();

        @GetMapping("/greeting")
        public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
            return new Greeting(counter.incrementAndGet(), String.format(template, name));
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/506/implement
status: Unchecked
record: -1
